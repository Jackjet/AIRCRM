//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Policy.ServiceReference2 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", ConfigurationName="ServiceReference2.PlyIntefaceServiceSoap")]
    public interface PlyIntefaceServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPOne", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPOne(string name, string pwd, string policyId, string fromCity, string toCity, string airCo, string TakeOffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPOne", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPOneAsync(string name, string pwd, string policyId, string fromCity, string toCity, string airCo, string TakeOffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPOne_B" +
            "yDisposalSynchronization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPOne_ByDisposalSynchronization(string name, string pwd, string policyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPOne_B" +
            "yDisposalSynchronization", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPOne_ByDisposalSynchronizationAsync(string name, string pwd, string policyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPLastD" +
            "ataDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPLastDataDelete(string name, string pwd, string UpdateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPLastD" +
            "ataDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPLastDataDeleteAsync(string name, string pwd, string UpdateDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetAirC" +
            "o", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAirCo(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetAirC" +
            "o", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAirCoAsync(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetCity" +
            "", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCity(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetCity" +
            "", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCityAsync(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "Discount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSeatDiscount(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "Discount", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSeatDiscountAsync(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "DiscountByAir", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSeatDiscountByAir(string name, string pwd, string air);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "DiscountByAir", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSeatDiscountByAirAsync(string name, string pwd, string air);
        
        // CODEGEN: 参数“GetSeatDiscountByteResult”需要其他方案信息，使用参数模式无法捕获这些信息。特定特性为“System.Xml.Serialization.XmlElementAttribute”。
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "DiscountByte", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Policy.ServiceReference2.GetSeatDiscountByteResponse GetSeatDiscountByte(Policy.ServiceReference2.GetSeatDiscountByteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetSeat" +
            "DiscountByte", ReplyAction="*")]
        System.Threading.Tasks.Task<Policy.ServiceReference2.GetSeatDiscountByteResponse> GetSeatDiscountByteAsync(Policy.ServiceReference2.GetSeatDiscountByteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPExactitude(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPExactitudeAsync(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetProv" +
            "iderOnDutyTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProviderOnDutyTime(string name, string pwd, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetProv" +
            "iderOnDutyTime", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProviderOnDutyTimeAsync(string name, string pwd, string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetProv" +
            "iderOnDutyTimeByPlyID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProviderOnDutyTimeByPlyID(string name, string pwd, string plyid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetProv" +
            "iderOnDutyTimeByPlyID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProviderOnDutyTimeByPlyIDAsync(string name, string pwd, string plyid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetFd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFd(string name, string pwd, string fromCity, string toCity, string airco);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetFd", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFdAsync(string name, string pwd, string fromCity, string toCity, string airco);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNew(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_GZip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AlreadyDisposalSynchronizationNew_All_GZip(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_GZip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AlreadyDisposalSynchronizationNew_All_GZipAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNew_All(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_AllAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNew_All_V2(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_V2", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_All_V2Async(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewSpecial_All", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNewSpecial_All(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewSpecial_All", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewSpecial_AllAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewSpecial_All_V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNewSpecial_All_V2(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewSpecial_All_V2", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewSpecial_All_V2Async(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewFD_All", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNewFD_All(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNewFD_All", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewFD_AllAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Disposa" +
            "lSynchronizationSpecial_All_GZip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DisposalSynchronizationSpecial_All_GZip(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Disposa" +
            "lSynchronizationSpecial_All_GZip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DisposalSynchronizationSpecial_All_GZipAsync(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByAirCodeGzip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPolicyByAirCodeGzip(string name, string pwd, string aircode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByAirCodeGzip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPolicyByAirCodeGzipAsync(string name, string pwd, string aircode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByCityCodeGzip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPolicyByCityCodeGzip(string name, string pwd, string fcity, string ecity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByCityCodeGzip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPolicyByCityCodeGzipAsync(string name, string pwd, string fcity, string ecity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByCityCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPolicyByCityCode(string name, string pwd, string fcity, string ecity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPoli" +
            "cyByCityCode", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPolicyByCityCodeAsync(string name, string pwd, string fcity, string ecity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetDele" +
            "tePolicy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDeletePolicy(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetDele" +
            "tePolicy", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDeletePolicyAsync(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetRest" +
            "rictPolicy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetRestrictPolicy(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetRest" +
            "rictPolicy", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRestrictPolicyAsync(string name, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_Note", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPbyPNR_Note(string name, string pwd, string pnr, int isSpecial, string strPnrInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_Note", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_NoteAsync(string name, string pwd, string pnr, int isSpecial, string strPnrInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_NoteByOffice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPbyPNR_NoteByOffice(string name, string pwd, string pnr, int isSpecial, string strPnrInfo, string rtOfficeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_NoteByOffice", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_NoteByOfficeAsync(string name, string pwd, string pnr, int isSpecial, string strPnrInfo, string rtOfficeNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/TestOut" +
            "ticketInterior", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TestOutticketInterior(string name, string pwd, string platformGuid, string type, string orderguid, string orderstate, string notifymsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/TestOut" +
            "ticketInterior", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TestOutticketInteriorAsync(string name, string pwd, string platformGuid, string type, string orderguid, string orderstate, string notifymsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_TaoBao", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPExactitude_TaoBao(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_TaoBao", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_TaoBaoAsync(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetZip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetZip(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetZip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetZipAsync(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_V1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNew_All_V1(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_All_V1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_All_V1Async(string name, string pwd, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPExactitude_V1(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V1Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPExactitude_V2(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V2", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V2Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPExactitude_V3(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPExact" +
            "itude_V3", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V3Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_Note_V1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SPbyPNR_Note_V1(string name, string pwd, string pnr, int isSpecial, string strPnrInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/SPbyPNR" +
            "_Note_V1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_Note_V1Async(string name, string pwd, string pnr, int isSpecial, string strPnrInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPlan" +
            "tPriceData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPlantPriceData(string Name, string Pwd, string ZKId, string AirCo, string FromCity, string ToCity, string CW, int IsSpecial, string UpdateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetPlan" +
            "tPriceData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlantPriceDataAsync(string Name, string Pwd, string ZKId, string AirCo, string FromCity, string ToCity, string CW, int IsSpecial, string UpdateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_AirCo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AlreadyDisposalSynchronizationNew_AirCo(string name, string pwd, string airCo, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/Already" +
            "DisposalSynchronizationNew_AirCo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_AirCoAsync(string name, string pwd, string airCo, string datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetFull" +
            "GetPolicy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFullGetPolicy(string Name, string Pwd, string Sign, string OperateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx/GetFull" +
            "GetPolicy", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFullGetPolicyAsync(string Name, string Pwd, string Sign, string OperateTime);

    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSeatDiscountByte", WrapperNamespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", IsWrapped=true)]
    public partial class GetSeatDiscountByteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", Order=0)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", Order=1)]
        public string pwd;
        
        public GetSeatDiscountByteRequest() {
        }
        
        public GetSeatDiscountByteRequest(string name, string pwd) {
            this.name = name;
            this.pwd = pwd;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSeatDiscountByteResponse", WrapperNamespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", IsWrapped=true)]
    public partial class GetSeatDiscountByteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://websvr.8000yi.com:8080/newPly/WebInterface/PlyIntefaceService.asmx", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSeatDiscountByteResult;
        
        public GetSeatDiscountByteResponse() {
        }
        
        public GetSeatDiscountByteResponse(byte[] GetSeatDiscountByteResult) {
            this.GetSeatDiscountByteResult = GetSeatDiscountByteResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PlyIntefaceServiceSoapChannel : Policy.ServiceReference2.PlyIntefaceServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlyIntefaceServiceSoapClient : System.ServiceModel.ClientBase<Policy.ServiceReference2.PlyIntefaceServiceSoap>, Policy.ServiceReference2.PlyIntefaceServiceSoap {
        
        public PlyIntefaceServiceSoapClient() {
        }
        
        public PlyIntefaceServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlyIntefaceServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlyIntefaceServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlyIntefaceServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet SPOne(string name, string pwd, string policyId, string fromCity, string toCity, string airCo, string TakeOffDate) {
            return base.Channel.SPOne(name, pwd, policyId, fromCity, toCity, airCo, TakeOffDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPOneAsync(string name, string pwd, string policyId, string fromCity, string toCity, string airCo, string TakeOffDate) {
            return base.Channel.SPOneAsync(name, pwd, policyId, fromCity, toCity, airCo, TakeOffDate);
        }
        
        public System.Data.DataSet SPOne_ByDisposalSynchronization(string name, string pwd, string policyId) {
            return base.Channel.SPOne_ByDisposalSynchronization(name, pwd, policyId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPOne_ByDisposalSynchronizationAsync(string name, string pwd, string policyId) {
            return base.Channel.SPOne_ByDisposalSynchronizationAsync(name, pwd, policyId);
        }
        
        public System.Data.DataSet SPLastDataDelete(string name, string pwd, string UpdateDate) {
            return base.Channel.SPLastDataDelete(name, pwd, UpdateDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPLastDataDeleteAsync(string name, string pwd, string UpdateDate) {
            return base.Channel.SPLastDataDeleteAsync(name, pwd, UpdateDate);
        }
        
        public System.Data.DataSet GetAirCo(string name, string pwd) {
            return base.Channel.GetAirCo(name, pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAirCoAsync(string name, string pwd) {
            return base.Channel.GetAirCoAsync(name, pwd);
        }
        
        public System.Data.DataSet GetCity(string name, string pwd) {
            return base.Channel.GetCity(name, pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCityAsync(string name, string pwd) {
            return base.Channel.GetCityAsync(name, pwd);
        }
        
        public System.Data.DataSet GetSeatDiscount(string name, string pwd) {
            return base.Channel.GetSeatDiscount(name, pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSeatDiscountAsync(string name, string pwd) {
            return base.Channel.GetSeatDiscountAsync(name, pwd);
        }
        
        public System.Data.DataSet GetSeatDiscountByAir(string name, string pwd, string air) {
            return base.Channel.GetSeatDiscountByAir(name, pwd, air);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSeatDiscountByAirAsync(string name, string pwd, string air) {
            return base.Channel.GetSeatDiscountByAirAsync(name, pwd, air);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Policy.ServiceReference2.GetSeatDiscountByteResponse Policy.ServiceReference2.PlyIntefaceServiceSoap.GetSeatDiscountByte(Policy.ServiceReference2.GetSeatDiscountByteRequest request) {
            return base.Channel.GetSeatDiscountByte(request);
        }
        
        public byte[] GetSeatDiscountByte(string name, string pwd) {
            Policy.ServiceReference2.GetSeatDiscountByteRequest inValue = new Policy.ServiceReference2.GetSeatDiscountByteRequest();
            inValue.name = name;
            inValue.pwd = pwd;
            Policy.ServiceReference2.GetSeatDiscountByteResponse retVal = ((Policy.ServiceReference2.PlyIntefaceServiceSoap)(this)).GetSeatDiscountByte(inValue);
            return retVal.GetSeatDiscountByteResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Policy.ServiceReference2.GetSeatDiscountByteResponse> Policy.ServiceReference2.PlyIntefaceServiceSoap.GetSeatDiscountByteAsync(Policy.ServiceReference2.GetSeatDiscountByteRequest request) {
            return base.Channel.GetSeatDiscountByteAsync(request);
        }
        
        public System.Threading.Tasks.Task<Policy.ServiceReference2.GetSeatDiscountByteResponse> GetSeatDiscountByteAsync(string name, string pwd) {
            Policy.ServiceReference2.GetSeatDiscountByteRequest inValue = new Policy.ServiceReference2.GetSeatDiscountByteRequest();
            inValue.name = name;
            inValue.pwd = pwd;
            return ((Policy.ServiceReference2.PlyIntefaceServiceSoap)(this)).GetSeatDiscountByteAsync(inValue);
        }
        
        public System.Data.DataSet SPExactitude(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitude(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPExactitudeAsync(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitudeAsync(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public System.Data.DataSet GetProviderOnDutyTime(string name, string pwd, string orderId) {
            return base.Channel.GetProviderOnDutyTime(name, pwd, orderId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProviderOnDutyTimeAsync(string name, string pwd, string orderId) {
            return base.Channel.GetProviderOnDutyTimeAsync(name, pwd, orderId);
        }
        
        public System.Data.DataSet GetProviderOnDutyTimeByPlyID(string name, string pwd, string plyid) {
            return base.Channel.GetProviderOnDutyTimeByPlyID(name, pwd, plyid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProviderOnDutyTimeByPlyIDAsync(string name, string pwd, string plyid) {
            return base.Channel.GetProviderOnDutyTimeByPlyIDAsync(name, pwd, plyid);
        }
        
        public System.Data.DataSet GetFd(string name, string pwd, string fromCity, string toCity, string airco) {
            return base.Channel.GetFd(name, pwd, fromCity, toCity, airco);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFdAsync(string name, string pwd, string fromCity, string toCity, string airco) {
            return base.Channel.GetFdAsync(name, pwd, fromCity, toCity, airco);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNew(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewAsync(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewAsync(name, pwd, datetime);
        }
        
        public string AlreadyDisposalSynchronizationNew_All_GZip(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_GZip(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<string> AlreadyDisposalSynchronizationNew_All_GZipAsync(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_GZipAsync(name, pwd, datetime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNew_All(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_AllAsync(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_AllAsync(name, pwd, datetime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNew_All_V2(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_V2(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_All_V2Async(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_V2Async(name, pwd, datetime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNewSpecial_All(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewSpecial_All(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewSpecial_AllAsync(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewSpecial_AllAsync(name, pwd, datetime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNewSpecial_All_V2(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewSpecial_All_V2(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewSpecial_All_V2Async(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewSpecial_All_V2Async(name, pwd, datetime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNewFD_All(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewFD_All(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNewFD_AllAsync(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNewFD_AllAsync(name, pwd, datetime);
        }
        
        public string DisposalSynchronizationSpecial_All_GZip(string name, string pwd) {
            return base.Channel.DisposalSynchronizationSpecial_All_GZip(name, pwd);
        }
        
        public System.Threading.Tasks.Task<string> DisposalSynchronizationSpecial_All_GZipAsync(string name, string pwd) {
            return base.Channel.DisposalSynchronizationSpecial_All_GZipAsync(name, pwd);
        }
        
        public string GetPolicyByAirCodeGzip(string name, string pwd, string aircode) {
            return base.Channel.GetPolicyByAirCodeGzip(name, pwd, aircode);
        }
        
        public System.Threading.Tasks.Task<string> GetPolicyByAirCodeGzipAsync(string name, string pwd, string aircode) {
            return base.Channel.GetPolicyByAirCodeGzipAsync(name, pwd, aircode);
        }
        
        public string GetPolicyByCityCodeGzip(string name, string pwd, string fcity, string ecity) {
            return base.Channel.GetPolicyByCityCodeGzip(name, pwd, fcity, ecity);
        }
        
        public System.Threading.Tasks.Task<string> GetPolicyByCityCodeGzipAsync(string name, string pwd, string fcity, string ecity) {
            return base.Channel.GetPolicyByCityCodeGzipAsync(name, pwd, fcity, ecity);
        }
        
        public System.Data.DataSet GetPolicyByCityCode(string name, string pwd, string fcity, string ecity) {
            return base.Channel.GetPolicyByCityCode(name, pwd, fcity, ecity);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPolicyByCityCodeAsync(string name, string pwd, string fcity, string ecity) {
            return base.Channel.GetPolicyByCityCodeAsync(name, pwd, fcity, ecity);
        }
        
        public System.Data.DataSet GetDeletePolicy(string name, string pwd, string datetime) {
            return base.Channel.GetDeletePolicy(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDeletePolicyAsync(string name, string pwd, string datetime) {
            return base.Channel.GetDeletePolicyAsync(name, pwd, datetime);
        }
        
        public System.Data.DataSet GetRestrictPolicy(string name, string pwd) {
            return base.Channel.GetRestrictPolicy(name, pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRestrictPolicyAsync(string name, string pwd) {
            return base.Channel.GetRestrictPolicyAsync(name, pwd);
        }
        
        public System.Data.DataSet SPbyPNR_Note(string name, string pwd, string pnr, int isSpecial, string strPnrInfo) {
            return base.Channel.SPbyPNR_Note(name, pwd, pnr, isSpecial, strPnrInfo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_NoteAsync(string name, string pwd, string pnr, int isSpecial, string strPnrInfo) {
            return base.Channel.SPbyPNR_NoteAsync(name, pwd, pnr, isSpecial, strPnrInfo);
        }
        
        public System.Data.DataSet SPbyPNR_NoteByOffice(string name, string pwd, string pnr, int isSpecial, string strPnrInfo, string rtOfficeNo) {
            return base.Channel.SPbyPNR_NoteByOffice(name, pwd, pnr, isSpecial, strPnrInfo, rtOfficeNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_NoteByOfficeAsync(string name, string pwd, string pnr, int isSpecial, string strPnrInfo, string rtOfficeNo) {
            return base.Channel.SPbyPNR_NoteByOfficeAsync(name, pwd, pnr, isSpecial, strPnrInfo, rtOfficeNo);
        }
        
        public bool TestOutticketInterior(string name, string pwd, string platformGuid, string type, string orderguid, string orderstate, string notifymsg) {
            return base.Channel.TestOutticketInterior(name, pwd, platformGuid, type, orderguid, orderstate, notifymsg);
        }
        
        public System.Threading.Tasks.Task<bool> TestOutticketInteriorAsync(string name, string pwd, string platformGuid, string type, string orderguid, string orderstate, string notifymsg) {
            return base.Channel.TestOutticketInteriorAsync(name, pwd, platformGuid, type, orderguid, orderstate, notifymsg);
        }
        
        public System.Data.DataSet SPExactitude_TaoBao(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitude_TaoBao(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_TaoBaoAsync(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitude_TaoBaoAsync(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public string GetZip(string file) {
            return base.Channel.GetZip(file);
        }
        
        public System.Threading.Tasks.Task<string> GetZipAsync(string file) {
            return base.Channel.GetZipAsync(file);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNew_All_V1(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_V1(name, pwd, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_All_V1Async(string name, string pwd, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_All_V1Async(name, pwd, datetime);
        }
        
        public System.Data.DataSet SPExactitude_V1(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitude_V1(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V1Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime) {
            return base.Channel.SPExactitude_V1Async(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime);
        }
        
        public System.Data.DataSet SPExactitude_V2(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay) {
            return base.Channel.SPExactitude_V2(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime, payWay);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V2Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay) {
            return base.Channel.SPExactitude_V2Async(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime, payWay);
        }
        
        public System.Data.DataSet SPExactitude_V3(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay) {
            return base.Channel.SPExactitude_V3(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime, payWay);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPExactitude_V3Async(string name, string pwd, string fromCity, string tocity, string airco, string airNo, string airbunk, string airTime, int payWay) {
            return base.Channel.SPExactitude_V3Async(name, pwd, fromCity, tocity, airco, airNo, airbunk, airTime, payWay);
        }
        
        public System.Data.DataSet SPbyPNR_Note_V1(string name, string pwd, string pnr, int isSpecial, string strPnrInfo) {
            return base.Channel.SPbyPNR_Note_V1(name, pwd, pnr, isSpecial, strPnrInfo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SPbyPNR_Note_V1Async(string name, string pwd, string pnr, int isSpecial, string strPnrInfo) {
            return base.Channel.SPbyPNR_Note_V1Async(name, pwd, pnr, isSpecial, strPnrInfo);
        }
        
        public System.Data.DataSet GetPlantPriceData(string Name, string Pwd, string ZKId, string AirCo, string FromCity, string ToCity, string CW, int IsSpecial, string UpdateTime) {
            return base.Channel.GetPlantPriceData(Name, Pwd, ZKId, AirCo, FromCity, ToCity, CW, IsSpecial, UpdateTime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlantPriceDataAsync(string Name, string Pwd, string ZKId, string AirCo, string FromCity, string ToCity, string CW, int IsSpecial, string UpdateTime) {
            return base.Channel.GetPlantPriceDataAsync(Name, Pwd, ZKId, AirCo, FromCity, ToCity, CW, IsSpecial, UpdateTime);
        }
        
        public System.Data.DataSet AlreadyDisposalSynchronizationNew_AirCo(string name, string pwd, string airCo, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_AirCo(name, pwd, airCo, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AlreadyDisposalSynchronizationNew_AirCoAsync(string name, string pwd, string airCo, string datetime) {
            return base.Channel.AlreadyDisposalSynchronizationNew_AirCoAsync(name, pwd, airCo, datetime);
        }
        
        public string GetFullGetPolicy(string Name, string Pwd, string Sign, string OperateTime) {
            return base.Channel.GetFullGetPolicy(Name, Pwd, Sign, OperateTime);
        }
        
        public System.Threading.Tasks.Task<string> GetFullGetPolicyAsync(string Name, string Pwd, string Sign, string OperateTime) {
            return base.Channel.GetFullGetPolicyAsync(Name, Pwd, Sign, OperateTime);
        }
    }
}
